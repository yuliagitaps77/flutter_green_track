plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.app.green_track"
    compileSdkVersion 35
    ndkVersion "26.1.10909125"

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.app.green_track"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86_64"
            universalApk true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
        debug {
            signingConfig signingConfigs.debug
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }

    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.core:core-ktx:1.12.0'
            force 'androidx.core:core:1.12.0'
            force 'com.google.android.play:core-common:2.0.3'
            exclude group: 'com.google.android.play', module: 'core'
        }
    }

    dependencies {
        coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
        implementation 'androidx.window:window:1.0.0'
        implementation 'androidx.window:window-java:1.0.0'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation 'com.google.android.material:material:1.11.0'
        implementation 'androidx.multidex:multidex:2.0.1'
        implementation 'com.google.android.play:app-update:2.1.0'
        implementation 'androidx.core:core-ktx:1.12.0'
        implementation 'androidx.core:core:1.12.0'
        implementation 'androidx.work:work-runtime-ktx:2.9.0'
    }
}

flutter {
    source '../..'
}
